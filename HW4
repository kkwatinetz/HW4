//unit4.hw
//Group members: Katie Kwatinetz, Lanayia Walters

#include <stdio.h>
#include <stdlib.h>

#define SIZE 10
#define TRUE 1
#define FALSE 0

int main()
{
    int *myArray;
    int *index, *largest, *found, *temp;
    float *total, *average;

    // Allocate memory for the array and other variables
    myArray = malloc(SIZE * sizeof(int));
    index = malloc(sizeof(int));
    largest = malloc(sizeof(int));
    total = malloc(sizeof(float));  // Allocate as float for accurate summing
    average = malloc(sizeof(float));
    found = malloc(sizeof(int));
    temp = malloc(sizeof(int));


    // Assign values to the myArray
    *myArray = 12;
    *(myArray + 1) = 56;
    *(myArray + 2) = 89;
    *(myArray + 3) = 87;
    *(myArray + 4) = 30;
    *(myArray + 5) = 10;
    *(myArray + 6) = 45;
    *(myArray + 7) = 1;
    *(myArray + 8) = 90;
    *(myArray + 9) = 16;

    // Find the largest value
    *largest = myArray[0];
    for (*index = 1; *index < SIZE; (*index)++)
    {
        if (myArray[*index] > *largest)
        {
            *largest = myArray[*index];
        }
    }
    printf("1) The largest value is %d.\n\n", *largest);

    // Calculate the average
    *total = 0.0;
    for (*index = 0; *index < SIZE; (*index)++)
    {
        *total += myArray[*index];
    }
    *average = *total / SIZE;
    printf("2) The average is %.2f\n\n", *average);

    // Check for duplicates
    *found = FALSE;
    for (*index = 0; *index < SIZE && *found == FALSE; (*index)++)
    {
        for (*temp = *index + 1; *temp < SIZE && *found == FALSE; (*temp)++)
        {
            if (myArray[*index] == myArray[*temp])
            {
                *found = TRUE;
            }
        }
    }

    if (*found == TRUE)
    {
        printf("3) The array has duplicates.\n");
    }
    else
    {
        printf("3) The array does not have duplicates.\n");
    }


    return 0;
}
